{"version":3,"file":"script.min.js","names":["urlGeo","urlWeather","key","svgPath","citySearch","document","getElementById","searchForm","weatherIcons","iconName","weather","getWeatherIcon","weatherKey","obj","find","el","getWeatherDescriptionByKey","months","addZeroPrepend","num","String","length","getCoordinates","city","Promise","resolve","reject","result","fetch","then","res","json","data","local_names","en","lat","lon","catch","err","console","log","alert","getWeather","name","temperature","Math","round","main","temp","weatherDescription","description","renderWeatherInfo","cityName","weatherIcon","innerText","src","printWeatherByCity","cityInfo","addEventListener","event","preventDefault","value"],"sources":["script.min.js"],"sourcesContent":["// получаем географические координаты городо по его названию \r\n// для этого воспольльзуемся API геокодирования\r\nconst urlGeo = 'http://api.openweathermap.org/geo/1.0/direct'\r\nconst urlWeather = `https://api.openweathermap.org/data/2.5/weather`\r\nconst key = 'b8c763881bde95df3bc652f6049e4738'\r\nconst svgPath = 'images/svg-animated/'\r\n\r\nconst citySearch = document.getElementById('city-search')\r\nconst searchForm = document.getElementById('search-form')\r\n\r\nconst weatherIcons = [\r\n    {key: 'clear sky', iconName: 'clear-sky.svg', weather: 'Sunny'},\r\n    {key: 'few clouds', iconName: 'partly-cloudy.svg', weather: 'Partly cloudy'},\r\n    {key: 'scattered clouds', iconName: 'cloudy.svg', weather: 'Cloudy'},\r\n    {key: 'broken clouds', iconName: 'cloudy.svg', weather: 'Cloudy'},\r\n    {key: 'overcast clouds', iconName: 'cloudy.svg', weather: 'Cloudy'},\r\n    {key: 'shower rain', iconName: 'rainy.svg', weather: 'Rainy'},\r\n    {key: 'light rain', iconName: 'rainy.svg', weather: 'Rainy'},\r\n    {key: 'rain', iconName: 'rainy.svg', weather: 'Rainy'},\r\n    {key: 'thunderstorm', iconName: 'thundery.svg', weather: 'Thundery'},\r\n    {key: 'snow', iconName: 'snowy.svg', weather: 'Snowy'},\r\n    {key: 'mist', iconName: 'foggy.svg', weather: 'Foggy'},\r\n]\r\nconst getWeatherIcon = function(weatherKey) {\r\n    const obj = weatherIcons.find(el => el.key === weatherKey)\r\n    if (obj) return obj.iconName\r\n    return false\r\n}\r\n\r\nconst getWeatherDescriptionByKey = function(weatherKey) {\r\n    const obj = weatherIcons.find(el => el.key === weatherKey)\r\n    if (obj) return obj.weather\r\n    return false\r\n}\r\n\r\nconst months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\r\n// функция, добавляющая ноль в начале, если передаваемое число одноразрядное\r\nconst addZeroPrepend = (num) => {\r\n    if (String(num).length == 1) {\r\n        return '0' + num\r\n    } else {\r\n        return num\r\n    }\r\n}\r\n\r\n\r\n// функция принимает название города и возвращает объект с координатами города\r\nconst getCoordinates = function(city) {\r\n    \r\n    return new Promise((resolve, reject) => {\r\n        let result = {}\r\n        fetch(`${urlGeo}?q=${city}&appid=${key}`)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                result.city = data[0].local_names.en                \r\n                result.lat = data[0].lat\r\n                result.lon = data[0].lon\r\n\r\n                resolve(result) \r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n                alert('city not found')\r\n            })\r\n    }).then(result => result)\r\n}\r\n\r\n// функция возвращает объект с данными о погоде в городе, координаты которого были в нее переданы\r\nconst getWeather = function(lat, lon) {\r\n    let result = {\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n        fetch(`${urlWeather}?lat=${lat}&lon=${lon}&appid=${key}`)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                result.city = res.name\r\n                result.temperature = Math.round(res.main.temp - 273.15)\r\n                result.weatherDescription = res.weather[0].description\r\n\r\n                resolve(result) \r\n            })\r\n    })\r\n}\r\n\r\n// функция принимает данные о погоде в городе и на их основе перерисовывает страницу\r\nconst renderWeatherInfo = function(weather) {\r\n    const cityName = document.getElementById('city-name')\r\n    const weatherIcon = document.getElementById('weather-icon')\r\n    const temperature = document.getElementById('temperature')\r\n    const weatherDescription = document.getElementById('weather-description')\r\n\r\n    cityName.innerText = weather.city\r\n    weatherIcon.src = `${svgPath}${getWeatherIcon(weather.weatherDescription)}`\r\n    temperature.innerText = weather.temperature\r\n    weatherDescription.innerText = getWeatherDescriptionByKey(weather.weatherDescription) \r\n}\r\n\r\nconst printWeatherByCity = function(city) {\r\n    getCoordinates(city)\r\n        .then(cityInfo => {\r\n            return getWeather(cityInfo.lat, cityInfo.lon)\r\n        })\r\n        .then(weather => {\r\n            renderWeatherInfo(weather)\r\n        })   \r\n} \r\n\r\nprintWeatherByCity('pskov')\r\n\r\n\r\nsearchForm.addEventListener('submit', (event) => {\r\n    event.preventDefault()\r\n\r\n    printWeatherByCity(citySearch.value)\r\n    citySearch.value = ''\r\n})\r\n// const render = new Promise((resolve, rejected) => {\r\n//     getCoordinates()\r\n// })\r\n\r\n// render.then(console.log('suc'))\r\n\r\n\r\n// const getCoordinates = (city) => {\r\n//     let result = {}\r\n//     fetch(`${urlGeo}?q=${city}&appid=${key}`)\r\n//         .then(res => res.json())\r\n//         .then(data => {\r\n//             result.lat = data[0].lat\r\n//             result.lon = data[0].lon\r\n//             result.city = data[0].local_names.en\r\n//         })\r\n//         .catch(err => console.log(err))\r\n\r\n//         console.log(result)\r\n//     return result\r\n// }\r\n\r\n\r\n\r\n// const response = {\r\n//     city: 'pskov',\r\n//     lat: 57.8173923,\r\n//     lon: 28.3343465,\r\n// }\r\n// console.log(response)\r\n// console.log(response.lat)\r\n\r\n// const url = `https://api.openweathermap.org/data/2.5/weather?lat=57.8173923&lon=28.3343465&appid=${key}`\r\n\r\n// fetch(url)\r\n//     .then(res => res.json())\r\n//     .then(data => console.log(data))\r\n\r\n// let geo = 'http://api.openweathermap.org/geo/1.0/direct?q=Moskow&appid=b8c763881bde95df3bc652f6049e4738'"],"mappings":"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"}